import{q as P,r as l,j as g}from"./index-DleebdEi.js";function h(e){const t=new Date;return t.setDate(t.getDate()-e),t}function j(e){return e?e.toLocaleDateString(void 0,{weekday:"long",year:"numeric",month:"long",day:"numeric"}):""}const I=["Open","In Progress","Closed"],E=["Stan","Priska","Edward","Fred","Chaldine"],d=[{id:1,title:"UI button is misaligned",description:"The main login button on the home page is off-center on mobile.",status:"Open",isArchived:!1,createdAt:h(1)},{id:2,title:"API call returns 500 error",description:"The user profile endpoint is crashing when no avatar is set.",status:"In Progress",isArchived:!1,agent:"Stan",createdAt:h(4)}],f=[...E],O=500;function c(e){return new Promise(t=>{setTimeout(()=>t(e),O)})}const r={getTickets:()=>c([...d]),getAgents:()=>c([...f]),addTicket:e=>{const t={...e,id:Math.max(0,...d.map(n=>n.id))+1,isArchived:!1,status:"Open",createdAt:new Date};return d.push(t),c(t)},updateTicketStatus:(e,t)=>{const n=d.find(a=>a.id===e);return n?(n.status=t,t!=="Closed"&&(n.isArchived=!1),c(n)):Promise.reject(new Error("Ticket not found"))},archiveTicket:e=>{const t=d.find(n=>n.id===e);return t&&t.status==="Closed"?(t.isArchived=!0,c(t)):Promise.reject(new Error("Ticket must be closed to be archived"))},assignAgent:(e,t)=>{const n=d.find(a=>a.id===e);return n?(n.agent=t,c(n)):Promise.reject(new Error("Ticket not found"))},addAgent:e=>{const t=e;return f.push(t),c(t)},removeAgent:e=>{const t=f.indexOf(e);if(t!==-1){const n=f.splice(t,1);return c(n[0])}return Promise.reject(new Error("Agent not found"))}},C=P("tickets",()=>{const e=l([]),t=l([]),n=l(!1),a=l(null),A=g(()=>e.value.filter(i=>!i.isArchived)),k=g(()=>e.value.filter(i=>i.isArchived));async function p(){n.value=!0,a.value=null;try{e.value=await r.getTickets()}catch{a.value="Failed to fetch tickets."}finally{n.value=!1}}async function T(){n.value=!0,a.value=null;try{t.value=await r.getAgents()}catch{a.value="Failed to fetch agents."}finally{n.value=!1}}async function w(i){const s=await r.addTicket(i);e.value.push(s)}async function m(i,s){const u=await r.updateTicketStatus(i,s),o=e.value.findIndex(v=>v.id===i);o!==-1&&(e.value[o]={...u})}async function y(i){const s=await r.archiveTicket(i),u=e.value.findIndex(o=>o.id===i);u!==-1&&(e.value[u]={...s})}async function x(i,s){const u=await r.assignAgent(i,s),o=e.value.findIndex(v=>v.id===i);o!==-1&&(e.value[o]={...u})}async function D(i){const s=await r.addAgent(i);t.value.push(s)}async function S(i){await r.removeAgent(i);const s=t.value.indexOf(i);s!==-1&&t.value.splice(s,1)}return{tickets:e,supportAgents:t,loading:n,error:a,fetchAgents:T,fetchTickets:p,addTicket:w,updateTicketStatus:m,activeTickets:A,archivedTickets:k,archiveTicket:y,assignAgent:x,addAgent:D,removeAgent:S}});export{I as s,j as t,C as u};
