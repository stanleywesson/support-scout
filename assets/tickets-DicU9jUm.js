import{q as P,r as f,j as v}from"./index-CcfGfNso.js";function h(e){const t=new Date;return t.setDate(t.getDate()-e),t}function F(e){return e?(typeof e=="string"?new Date(e):e).toLocaleDateString(void 0,{weekday:"long",year:"numeric",month:"long",day:"numeric"}):""}const L=["Open","In Progress","Closed"],b=["Stan","Priska","Edward","Fred","Chaldine"],j=[{id:1,title:"UI button is misaligned",description:"The main login button on the home page is off-center on mobile.",status:"Open",isArchived:!1,createdAt:h(1)},{id:2,title:"API call returns 500 error",description:"The user profile endpoint is crashing when no avatar is set.",status:"In Progress",isArchived:!1,agent:"Stan",createdAt:h(4)}],E=[...b];let u,l;p();function p(){u=JSON.parse(JSON.stringify(j)),l=[...E]}const I=500;function r(e){return new Promise(t=>{setTimeout(()=>t(e),I)})}const c={reset:()=>(p(),r({})),getTickets:()=>r([...u]),getAgents:()=>r([...l]),addTicket:e=>{const t={...e,id:Math.max(0,...u.map(n=>n.id))+1,isArchived:!1,status:"Open",createdAt:new Date};return u.push(t),r(t)},updateTicketStatus:(e,t)=>{const n=u.find(a=>a.id===e);return n?(n.status=t,t!=="Closed"&&(n.isArchived=!1),r(n)):Promise.reject(new Error("Ticket not found"))},archiveTicket:e=>{const t=u.find(n=>n.id===e);return t&&t.status==="Closed"?(t.isArchived=!0,r(t)):Promise.reject(new Error("Ticket must be closed to be archived"))},assignAgent:(e,t)=>{const n=u.find(a=>a.id===e);return n?(n.agent=t,r(n)):Promise.reject(new Error("Ticket not found"))},addAgent:e=>{const t=e;return l.push(t),r(t)},removeAgent:e=>{const t=l.indexOf(e);if(t!==-1){const n=l.splice(t,1);return r(n[0])}return Promise.reject(new Error("Agent not found"))}},J=P("tickets",()=>{const e=f([]),t=f([]),n=f(!1),a=f(null),A=v(()=>e.value.filter(i=>!i.isArchived)),k=v(()=>e.value.filter(i=>i.isArchived));async function T(){n.value=!0,a.value=null;try{e.value=await c.getTickets()}catch{a.value="Failed to fetch tickets."}finally{n.value=!1}}async function w(){n.value=!0,a.value=null;try{t.value=await c.getAgents()}catch{a.value="Failed to fetch agents."}finally{n.value=!1}}async function m(i){const s=await c.addTicket(i);e.value.push(s)}async function y(i,s){const d=await c.updateTicketStatus(i,s),o=e.value.findIndex(g=>g.id===i);o!==-1&&(e.value[o]={...d})}async function x(i){const s=await c.archiveTicket(i),d=e.value.findIndex(o=>o.id===i);d!==-1&&(e.value[d]={...s})}async function S(i,s){const d=await c.assignAgent(i,s),o=e.value.findIndex(g=>g.id===i);o!==-1&&(e.value[o]={...d})}async function D(i){const s=await c.addAgent(i);t.value.push(s)}async function O(i){await c.removeAgent(i);const s=t.value.indexOf(i);s!==-1&&t.value.splice(s,1)}return{tickets:e,supportAgents:t,loading:n,error:a,fetchAgents:w,fetchTickets:T,addTicket:m,updateTicketStatus:y,activeTickets:A,archivedTickets:k,archiveTicket:x,assignAgent:S,addAgent:D,removeAgent:O}});export{L as s,F as t,J as u};
