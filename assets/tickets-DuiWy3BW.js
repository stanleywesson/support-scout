import{x as E,r as g,m as v}from"./index-ywpcxkc4.js";function p(e){const t=new Date;return t.setDate(t.getDate()-e),t}function L(e){return e?(typeof e=="string"?new Date(e):e).toLocaleDateString(void 0,{weekday:"long",year:"numeric",month:"long",day:"numeric"}):""}const F=["Open","In Progress","Closed"],U=["Low","Medium","High","Urgent"],b=["Stan","Priska","Edward","Fred","Chaldine"],j=[{id:1,title:"UI button is misaligned",description:"The main login button on the home page is off-center on mobile.",status:"Open",isArchived:!1,createdAt:p(1),priority:"Medium"},{id:2,title:"API call returns 500 error",description:"The user profile endpoint is crashing when no avatar is set.",status:"In Progress",isArchived:!1,agent:"Stan",createdAt:p(4),priority:"Medium"}],I=[...b];let d,f;k();function k(){d=JSON.parse(JSON.stringify(j)),f=[...I]}const M=500;function c(e){return new Promise(t=>{setTimeout(()=>t(e),M)})}const o={reset:()=>(k(),c({})),getTickets:()=>c([...d]),getAgents:()=>c([...f]),addTicket:e=>{const t={...e,id:Math.max(0,...d.map(n=>n.id))+1,isArchived:!1,status:"Open",createdAt:new Date};return d.push(t),c(t)},updateTicketStatus:(e,t)=>{const n=d.find(a=>a.id===e);return n?(n.status=t,t!=="Closed"&&(n.isArchived=!1),c(n)):Promise.reject(new Error("Ticket not found"))},updateTicketPriority:(e,t)=>{const n=d.find(a=>a.id===e);return n?(n.priority=t,c(n)):Promise.reject(new Error("Ticket not found"))},archiveTicket:e=>{const t=d.find(n=>n.id===e);return t&&t.status==="Closed"?(t.isArchived=!0,c(t)):Promise.reject(new Error("Ticket must be closed to be archived"))},assignAgent:(e,t)=>{const n=d.find(a=>a.id===e);return n?(n.agent=t,c(n)):Promise.reject(new Error("Ticket not found"))},addAgent:e=>{const t=e;return f.push(t),c(t)},removeAgent:e=>{const t=f.indexOf(e);if(t!==-1){const n=f.splice(t,1);return c(n[0])}return Promise.reject(new Error("Agent not found"))}},J=E("tickets",()=>{const e=g([]),t=g([]),n=g(!1),a=g(null),h=v(()=>e.value.filter(i=>!i.isArchived)),T=v(()=>e.value.filter(i=>i.isArchived));async function A(){n.value=!0,a.value=null;try{e.value=await o.getTickets()}catch{a.value="Failed to fetch tickets."}finally{n.value=!1}}async function m(){n.value=!0,a.value=null;try{t.value=await o.getAgents()}catch{a.value="Failed to fetch agents."}finally{n.value=!1}}async function w(i){const s=await o.addTicket(i);e.value.push(s)}async function y(i,s){const u=await o.updateTicketStatus(i,s),r=e.value.findIndex(l=>l.id===i);r!==-1&&(e.value[r]={...u})}async function x(i,s){const u=await o.updateTicketPriority(i,s),r=e.value.findIndex(l=>l.id===i);r!==-1&&(e.value[r]={...u})}async function P(i){const s=await o.archiveTicket(i),u=e.value.findIndex(r=>r.id===i);u!==-1&&(e.value[u]={...s})}async function S(i,s){const u=await o.assignAgent(i,s),r=e.value.findIndex(l=>l.id===i);r!==-1&&(e.value[r]={...u})}async function D(i){const s=await o.addAgent(i);t.value.push(s)}async function O(i){await o.removeAgent(i);const s=t.value.indexOf(i);s!==-1&&t.value.splice(s,1)}return{tickets:e,supportAgents:t,loading:n,error:a,fetchAgents:m,fetchTickets:A,addTicket:w,updateTicketStatus:y,activeTickets:h,archivedTickets:T,archiveTicket:P,assignAgent:S,addAgent:D,removeAgent:O,updateTicketPriority:x}});export{U as p,F as s,L as t,J as u};
